DLL - Dynamic Link Library - библиотека динамической компоновки.
Библиотека - набор дополнительного кода (ф-ции, классы).

DLL - это динамическая библиотека, которая хранит скомпилированные ф-ции, которые могут выполняться другой программой. Она не имеет точки запуска.
COM - это набор библиотек, расширенных библиотек, не .Net (но подключить можно попробовать).

C# exe - это не совсем настоящий exe, это инструкция для .Net, и он выполянется в управляемом коде(есть сборщик мусора, git-компилятор, можно декомпилировать)
C++ exe - это настоящий exe с двоичным кодом.

Статическая компоновка - добавление библиотеки как кода (текста) к собственным файлам и дальнейшая компиляция:
"+" все вместе, один выполняемый файл
"-" собираются все коды библиотек независимо используются они или нет

Динамическая компоновка - отдельная компиляция библиотек в выполняемый код и подключение к ним с использованием
отдельных частей (процедур):
"+" наш файл короче, разные проекты могут ссылаться на одну DLL
"-" необходимость поставлять несколько файлов - кроме EXE все DLL

Маршализация(Маршалинг) - передаёт данные из управляемого кода в неуправляемый и наоборот.

ОС чаще всего, ограничивает типы выполняемых файлов (не любой файл может выполняться на любой ОС),
поэтому нет необходимости передвать DLL между ПК, их можно включать до складу ОС.

Согласование типов - в DLL чаще всего использ. системные типы, тогда как в конкретном языке (C#) имеется свой список типов.

[DllImport("NameDll.dll"), EntryPoint = "NameFunc"]  // из какой библиотеки
public static extern  // static - защита от GC, extern - ссылка на внешний модуль
    int NewNameFunc(arg1, arg2, ...);  // переписываем заголовок ф-ции в C# (использ. C# типы)
// EntryPoint - позволяет использовать другое название для метода.

// Из DLL "User32.dll"
int MessageBoxA(
  [in, optional] HWND   hWnd,        // IntPtr
  [in, optional] LPCSTR lpText,      // string
  [in, optional] LPCSTR lpCaption,   // string
  [in]           UINT   uType        // uint
);

// Из DLL "Kernel32.dll"
HANDLE CreateThread(
  [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,      // IntPtr
  [in]            SIZE_T                  dwStackSize,             // uint
  [in]            LPTHREAD_START_ROUTINE  lpStartAddress,          // delegate (вместо IntPtr)
  [in, optional]  __drv_aliasesMem LPVOID lpParameter,             // IntPtr
  [in]            DWORD                   dwCreationFlags,         // uint
  [out, optional] LPDWORD                 lpThreadId               // IntPtr
);
