Многозадачность
Это способы асинхронного программирования с использованием задач - объектов языка
программирования или платформы (.NET)
Реализация многозадачности не требует многопоточности (хотя часто на ней базируется).

Старый стиль - использования класса Task
Новый стиль - async/await
  await - может использоваться только в async методах.
          ждёт выполнение метода и "снимает" оболочку Task<> с полученного результата

 main              wait all				| await Task.WhenAll(
--------|------.............|-final-	|     RunProgressWaitable(ProgressBar10),
		|--------------					|     RunProgressWaitable(ProgressBar11, 4),
		|------------------	|			|     RunProgressWaitable(ProgressBar12, 2)
		|----------						| );
										| MessageBox.Show("Done");

 main
--------|------|						| С счётчиком задач или с другим общим ресурсом
		|--------------					|
		|------------------	| -final-	| 
		|----------						| 


Различия задач и потоков:
   - нет необходимости Invoke: прямой доступ к UI элементам
   - нет прямых инструкций создания объектов (new Thread)
   - в поток можно передавать только object?, в задачу - любые типы и кол-во параметров

 Параллельное исполнение, ожидать нельзя, поскольку методы void:
    RunProgress(ProgressBar10);
    RunProgress(ProgressBar11, 4);
    RunProgress(ProgressBar12, 2);

 Последовательное выполнение:
    await RunProgressWaitable(ProgressBar10);
    await RunProgressWaitable(ProgressBar11, 4);
    await RunProgressWaitable(ProgressBar12, 2);

 Последовательное исполнение с void методами - обертка Task.Run (но в такой схеме требуется Invoke дл UI):
    await Task.Run(() => RunProgress(ProgressBar10));
    await Task.Run(() => RunProgress(ProgressBar11, 4));
    await Task.Run(() => RunProgress(ProgressBar12, 2));
